import numpy as np

from nnlibrary.auto_diff_fast.forward_mode import math_ops

from nnlibrary.auto_diff_fast import AbstractNode


class Node(AbstractNode):
    def __repr__(self):
        return f'{self.values, self.partials}'

    @staticmethod
    def _wrapper(other):
        return other if isinstance(other, AbstractNode) else Node(other)

    def __getitem__(self, item):
        return Node(values=self.values[item], partials=self.partials[item])

    def __len__(self):
        return len(self.values)

    def __add__(self, other):
        # print('__add__')
        return math_ops.Addition.call(x1=self, x2=self._wrapper(other=other))

    def __radd__(self, other):
        print('__radd__')
        return math_ops.Addition.call(x1=self._wrapper(other=other), x2=self)

    def __mul__(self, other):
        # print('__mul__')
        return math_ops.Multiplication.call(x1=self, x2=self._wrapper(other=other))

    def __rmul__(self, other):
        print('__rmul__')
        return math_ops.Multiplication.call(x1=self._wrapper(other=other), x2=self)

    def __matmul__(self, other):
        print('__matmul__')
        return math_ops.MatrixMultiplication.call(x1=self, x2=self._wrapper(other=other))

    def __rmatmul__(self, other):
        print('__rmatmul__')
        return math_ops.MatrixMultiplication.call(x1=self._wrapper(other=other), x2=self)

    def sum(self, *args, **kwargs):
        print('sum')
        return math_ops.Summation.call(x=self, *args, **kwargs)

    # def __array__(self, *args, **kwargs): print('__array__', args, kwargs)
    # def __array_function__(self, *args, **kwargs): print('__array_function__', args, kwargs)
    # def __array_interface__(self, *args, **kwargs): print('__array_interface__', args, kwargs)
    # def __array_struct__(self, *args, **kwargs): print('__array_struct__', args, kwargs)
    # def __setattr__(self, *args, **kwargs): print('__setattr__', args, kwargs)
    # def __subclasshook__(self, *args, **kwargs): print('__subclasshook__', args, kwargs)
    # def __getattribute__(self, *args, **kwargs): print('__getattribute__', args, kwargs)

    # def __str__(self, *args, **kwargs): print('__str__', args, kwargs)
    # def __len__(self, *args, **kwargs): print('__len__', args, kwargs)
    # def __iter__(self, *args, **kwargs): print('__iter__', args, kwargs)
    # def __getitem__(self, *args, **kwargs): print('__getitem__', args, kwargs)
    # def __class__(self, *args, **kwargs): print('__class__', args, kwargs)

    def T(self, *args, **kwargs): print('T', args, kwargs)
    def __array_finalize__(self, *args, **kwargs): print('__array_finalize__', args, kwargs)
    def __array_prepare__(self, *args, **kwargs): print('__array_prepare__', args, kwargs)
    def __array_priority__(self, *args, **kwargs): print('__array_priority__', args, kwargs)
    def __array_ufunc__(self, *args, **kwargs): print('__array_ufunc__', args, kwargs)
    def __array_wrap__(self, *args, **kwargs): print('__array_wrap__', args, kwargs)
    def __abs__(self, *args, **kwargs): print('__abs__', args, kwargs)
    def __and__(self, *args, **kwargs): print('__and__', args, kwargs)
    def __bool__(self, *args, **kwargs): print('__bool__', args, kwargs)
    def __class_getitem__(cls): print('__class_getitem__')
    def __complex__(self, *args, **kwargs): print('__complex__', args, kwargs)
    def __contains__(self, *args, **kwargs): print('__contains__', args, kwargs)
    def __copy__(self, *args, **kwargs): print('__copy__', args, kwargs)
    def __deepcopy__(self, *args, **kwargs): print('__deepcopy__', args, kwargs)
    def __delattr__(self, *args, **kwargs): print('__delattr__', args, kwargs)
    def __delitem__(self, *args, **kwargs): print('__delitem__', args, kwargs)
    def __dir__(self, *args, **kwargs): print('__dir__', args, kwargs)
    def __divmod__(self, *args, **kwargs): print('__divmod__', args, kwargs)
    def __dlpack__(self, *args, **kwargs): print('__dlpack__', args, kwargs)
    def __dlpack_device__(self, *args, **kwargs): print('__dlpack_device__', args, kwargs)
    def __doc__(self, *args, **kwargs): print('__doc__', args, kwargs)
    def __eq__(self, *args, **kwargs): print('__eq__', args, kwargs)
    def __float__(self, *args, **kwargs): print('__float__', args, kwargs)
    def __floordiv__(self, *args, **kwargs): print('__floordiv__', args, kwargs)
    def __format__(self, *args, **kwargs): print('__format__', args, kwargs)
    def __ge__(self, *args, **kwargs): print('__ge__', args, kwargs)
    def __gt__(self, *args, **kwargs): print('__gt__', args, kwargs)
    def __hash__(self, *args, **kwargs): print('__hash__', args, kwargs)
    def __iadd__(self, *args, **kwargs): print('__iadd__', args, kwargs)
    def __iand__(self, *args, **kwargs): print('__iand__', args, kwargs)
    def __ifloordiv__(self, *args, **kwargs): print('__ifloordiv__', args, kwargs)
    def __ilshift__(self, *args, **kwargs): print('__ilshift__', args, kwargs)
    def __imatmul__(self, *args, **kwargs): print('__imatmul__', args, kwargs)
    def __imod__(self, *args, **kwargs): print('__imod__', args, kwargs)
    def __imul__(self, *args, **kwargs): print('__imul__', args, kwargs)
    def __index__(self, *args, **kwargs): print('__index__', args, kwargs)
    def __init_subclass__(cls): print('__init_subclass__')
    def __int__(self, *args, **kwargs): print('__int__', args, kwargs)
    def __invert__(self, *args, **kwargs): print('__invert__', args, kwargs)
    def __ior__(self, *args, **kwargs): print('__ior__', args, kwargs)
    def __ipow__(self, *args, **kwargs): print('__ipow__', args, kwargs)
    def __irshift__(self, *args, **kwargs): print('__irshift__', args, kwargs)
    def __isub__(self, *args, **kwargs): print('__isub__', args, kwargs)
    def __itruediv__(self, *args, **kwargs): print('__itruediv__', args, kwargs)
    def __ixor__(self, *args, **kwargs): print('__ixor__', args, kwargs)
    def __le__(self, *args, **kwargs): print('__le__', args, kwargs)
    def __lshift__(self, *args, **kwargs): print('__lshift__', args, kwargs)
    def __lt__(self, *args, **kwargs): print('__lt__', args, kwargs)
    def __mod__(self, *args, **kwargs): print('__mod__', args, kwargs)
    def __ne__(self, *args, **kwargs): print('__ne__', args, kwargs)
    def __neg__(self, *args, **kwargs): print('__neg__', args, kwargs)
    def __or__(self, *args, **kwargs): print('__or__', args, kwargs)
    def __pos__(self, *args, **kwargs): print('__pos__', args, kwargs)
    def __pow__(self, *args, **kwargs): print('__pow__', args, kwargs)
    def __rand__(self, *args, **kwargs): print('__rand__', args, kwargs)
    def __rdivmod__(self, *args, **kwargs): print('__rdivmod__', args, kwargs)
    def __reduce__(self, *args, **kwargs): print('__reduce__', args, kwargs)
    def __reduce_ex__(self, *args, **kwargs): print('__reduce_ex__', args, kwargs)
    def __rfloordiv__(self, *args, **kwargs): print('__rfloordiv__', args, kwargs)
    def __rlshift__(self, *args, **kwargs): print('__rlshift__', args, kwargs)
    def __rmod__(self, *args, **kwargs): print('__rmod__', args, kwargs)
    def __ror__(self, *args, **kwargs): print('__ror__', args, kwargs)
    def __rpow__(self, *args, **kwargs): print('__rpow__', args, kwargs)
    def __rrshift__(self, *args, **kwargs): print('__rrshift__', args, kwargs)
    def __rshift__(self, *args, **kwargs): print('__rshift__', args, kwargs)
    def __rsub__(self, *args, **kwargs): print('__rsub__', args, kwargs)
    def __rtruediv__(self, *args, **kwargs): print('__rtruediv__', args, kwargs)
    def __rxor__(self, *args, **kwargs): print('__rxor__', args, kwargs)
    def __setitem__(self, *args, **kwargs): print('__setitem__', args, kwargs)
    def __setstate__(self, *args, **kwargs): print('__setstate__', args, kwargs)
    def __sizeof__(self, *args, **kwargs): print('__sizeof__', args, kwargs)
    def __sub__(self, *args, **kwargs): print('__sub__', args, kwargs)
    def __truediv__(self, *args, **kwargs): print('__truediv__', args, kwargs)
    def __xor__(self, *args, **kwargs): print('__xor__', args, kwargs)
    def all(self, *args, **kwargs): print('all', args, kwargs)
    def any(self, *args, **kwargs): print('any', args, kwargs)
    def argmax(self, *args, **kwargs): print('argmax', args, kwargs)
    def argmin(self, *args, **kwargs): print('argmin', args, kwargs)
    def argpartition(self, *args, **kwargs): print('argpartition', args, kwargs)
    def argsort(self, *args, **kwargs): print('argsort', args, kwargs)
    def astype(self, *args, **kwargs): print('astype', args, kwargs)
    def b(self, *args, **kwargs): print('b', args, kwargs)
    def ase(self, *args, **kwargs): print('ase', args, kwargs)
    def byteswap(self, *args, **kwargs): print('byteswap', args, kwargs)
    def choose(self, *args, **kwargs): print('choose', args, kwargs)
    def clip(self, *args, **kwargs): print('clip', args, kwargs)
    def compress(self, *args, **kwargs): print('compress', args, kwargs)
    def conj(self, *args, **kwargs): print('conj', args, kwargs)
    def conjugate(self, *args, **kwargs): print('conjugate', args, kwargs)
    def copy(self, *args, **kwargs): print('copy', args, kwargs)
    def ctypes(self, *args, **kwargs): print('ctypes', args, kwargs)
    def cumprod(self, *args, **kwargs): print('cumprod', args, kwargs)
    def cumsum(self, *args, **kwargs): print('cumsum', args, kwargs)
    def data(self, *args, **kwargs): print('data', args, kwargs)
    def diagonal(self, *args, **kwargs): print('diagonal', args, kwargs)
    def dot(self, *args, **kwargs): print('dot', args, kwargs)
    def dtype(self, *args, **kwargs): print('dtype', args, kwargs)
    def dump(self, *args, **kwargs): print('dump', args, kwargs)
    def dumps(self, *args, **kwargs): print('dumps', args, kwargs)
    def fill(self, *args, **kwargs): print('fill', args, kwargs)
    def flags(self, *args, **kwargs): print('flags', args, kwargs)
    def flat(self, *args, **kwargs): print('flat', args, kwargs)
    def flatten(self, *args, **kwargs): print('flatten', args, kwargs)
    def getfield(self, *args, **kwargs): print('getfield', args, kwargs)
    def imag(self, *args, **kwargs): print('imag', args, kwargs)
    def item(self, *args, **kwargs): print('item', args, kwargs)
    def itemse(self, *args, **kwargs): print('itemse', args, kwargs)
    def t(self, *args, **kwargs): print('t', args, kwargs)
    def itemsize(self, *args, **kwargs): print('itemsize', args, kwargs)
    def max(self, *args, **kwargs): print('max', args, kwargs)
    def mean(self, *args, **kwargs): print('mean', args, kwargs)
    def min(self, *args, **kwargs): print('min', args, kwargs)
    def nbytes(self, *args, **kwargs): print('nbytes', args, kwargs)
    def ndim(self, *args, **kwargs): print('ndim', args, kwargs)
    def newbyteorder(self, *args, **kwargs): print('newbyteorder', args, kwargs)
    def nonzero(self, *args, **kwargs): print('nonzero', args, kwargs)
    def partition(self, *args, **kwargs): print('partition', args, kwargs)
    def prod(self, *args, **kwargs): print('prod', args, kwargs)
    def ptp(self, *args, **kwargs): print('ptp', args, kwargs)
    def put(self, *args, **kwargs): print('put', args, kwargs)
    def ravel(self, *args, **kwargs): print('ravel', args, kwargs)
    def real(self, *args, **kwargs): print('real', args, kwargs)
    def repeat(self, *args, **kwargs): print('repeat', args, kwargs)
    def reshape(self, *args, **kwargs): print('reshape', args, kwargs)
    def resize(self, *args, **kwargs): print('resize', args, kwargs)
    def round(self, *args, **kwargs): print('round', args, kwargs)
    def searchsorted(self, *args, **kwargs): print('searchsorted', args, kwargs)
    def setfield(self, *args, **kwargs): print('setfield', args, kwargs)
    def setflags(self, *args, **kwargs): print('setflags', args, kwargs)
    def shape(self, *args, **kwargs): print('shape', args, kwargs)
    def size(self, *args, **kwargs): print('size', args, kwargs)
    def sort(self, *args, **kwargs): print('sort', args, kwargs)
    def squeeze(self, *args, **kwargs): print('squeeze', args, kwargs)
    def std(self, *args, **kwargs): print('std', args, kwargs)
    def strides(self, *args, **kwargs): print('strides', args, kwargs)
    def swapaxes(self, *args, **kwargs): print('swapaxes', args, kwargs)
    def take(self, *args, **kwargs): print('take', args, kwargs)
    def tobytes(self, *args, **kwargs): print('tobytes', args, kwargs)
    def tofile(self, *args, **kwargs): print('tofile', args, kwargs)
    def tolist(self, *args, **kwargs): print('tolist', args, kwargs)
    def tostring(self, *args, **kwargs): print('tostring', args, kwargs)
    def trace(self, *args, **kwargs): print('trace', args, kwargs)
    def transpose(self, *args, **kwargs): print('transpose', args, kwargs)
    def var(self, *args, **kwargs): print('var', args, kwargs)
    def view(self, *args, **kwargs): print('view', args, kwargs)


